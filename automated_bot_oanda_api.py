# -*- coding: utf-8 -*-
"""Automated bot Oanda API.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1YNKNo0EJ33CRSk9dWA_A7VMZU4Zeuqhc
"""

API = "api-fxpractice.oanda.com"
STREAM_API = "stream-fxpractice.oanda.com"

ACCESS_TOKEN ="d3bc3d87ed3dae4c722e6205ac5aeea6-fe7755fc3e146ad278186b9130ee5e4d"


ACCOUNT_ID =None

"""# Accessing API"""

import requests
import json
import numpy as np
import pandas as pd

PRICING_PATH = f"/v3/accounts/101-001-17640366-001/pricing"

query = {"instruments": "USD_CAD"} 
headers = {"Authorization": "Bearer "+ "d3bc3d87ed3dae4c722e6205ac5aeea6-fe7755fc3e146ad278186b9130ee5e4d"
}

response = requests.get("https://"+ "api-fxpractice.oanda.com"+PRICING_PATH, headers=headers, params=query)

response.json()

def get_ask_price(instrument):
    """
    Returns a (time, ask price) tuple.
    """
    query = {"instruments": instrument} 
    response = requests.get("https://"+"api-fxpractice.oanda.com"+PRICING_PATH, headers=headers, params=query)
    json_response = response.json()

    prices = json_response["prices"][0]["asks"][0]["price"]
    prices = float(prices)

    time_str = json_response["time"]
    time = pd.to_datetime(time_str)

    return time, prices

get_ask_price("USD_CAD")

get_ask_price("EUR_USD")

"""# """

pip install v20

"""# Using  v20

https://github.com/oanda/v20-python
"""

import v20

api = v20.Context(hostname= "api-fxpractice.oanda.com", token="d3bc3d87ed3dae4c722e6205ac5aeea6-fe7755fc3e146ad278186b9130ee5e4d", port=443)
stream_api = v20.Context(hostname="stream-fxpractice.oanda.com", token="d3bc3d87ed3dae4c722e6205ac5aeea6-fe7755fc3e146ad278186b9130ee5e4d", port=443)

response = api.pricing.get(accountID="101-001-17640366-001", instruments="USD_CAD,EUR_CAD")

json.loads(response.body["prices"][0].json())

"""# Streaming"""

import time

from_time = time.mktime(pd.to_datetime("12/01/2021").timetuple())
to_time = time.mktime(pd.to_datetime("14/01/2021").timetuple())
print(f"Window start: {from_time}, window end: {to_time}." )

header = {"Authorization": "Bearer "+"d3bc3d87ed3dae4c722e6205ac5aeea6-fe7755fc3e146ad278186b9130ee5e4d"} 
query = {"from": str(from_time), "to": str(to_time), "granularity": "D"}

INSTRUMENT = "EUR_USD"

CANDLES_PATH = f"/v3/accounts/101-001-17640366-001/instruments/EUR_USD/candles"

response = requests.get("https://"+ "api-fxpractice.oanda.com"+CANDLES_PATH, headers=header, params=query)

def json_to_pandas(json):
    json_file = json.json()
    price_json = json_file["candle"]
    times = []
    close_price, high_price, low_price, open_price = [], [], [], []

    for candles in price_json:
        times.append(candle["time"])
        close_price.append(float(candle["mid"]["c"]))
        high_price.append(float(candle["mid"]["h"]))
        low_price.append(float(candle["mid"]["l"]))
        open_price.append(float(candle["mid"]["o"]))
    
    dataframe = pd.DataFrame({"close": close_price, "high": high_price, "low": low_price, "open": open_price})
    dataframe.index = pd.to_datetime(times)
    return dataframe

EURCAD_df = json_to_pandas(response)

EURCAD_df.head(5)

EURCAD_df["close"].plot()

stream_api

response = stream_api.pricing.stream(accountID="101-001-17640366-001", instruments="EUR_USD", snapshot=True)

for price_data in response.lines:
    print(price_data)